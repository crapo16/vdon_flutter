plugins {
    id 'com.android.application'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk') ?: 
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")

def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0.0'
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')?.toInteger() ?: 1

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    compileSdkVersion 34

    defaultConfig {
        applicationId "flutter.vdo.ninja"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/proguard/androidx-annotations.pro']
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    namespace 'com.cloudwebrtc.flutterwebrtcdemo'
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
